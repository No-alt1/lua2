local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'

-- Load the library and required components
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()

local Window = Library:CreateWindow({
    Title = 'Aimbot, ESP, and FOV Menu',
    Center = true,
    AutoShow = true,
    TabPadding = 8,
    MenuFadeTime = 0.2
})

local Tabs = {
    Main = Window:AddTab('Main'),
    ['UI Settings'] = Window:AddTab('UI Settings')
}

-- Create the ESP variable
local ESP = loadstring(game:HttpGet("https://raw.githubusercontent.com/No-alt1/lua2/refs/heads/main/EspLua"))()

-- Set initial ESP settings (all disabled)
ESP.Enabled = false
ESP.ShowBox = false
ESP.BoxType = "Corner Box Esp"
ESP.ShowName = false
ESP.ShowHealth = false
ESP.ShowTracer = false
ESP.ShowDistance = false
ESP.MaxDistance = 1000 -- Set a default max distance for ESP

-- Create the aimbot variables
local fov = 250  -- Set initial FOV circle radius to 250
local smoothing = 1  -- Initial smoothing value for aimbot set to 1
local prediction = 0  -- Initial prediction value set to 0 (no prediction)
local aimbotEnabled = false
local fovCircleEnabled = false
local rgbEffectEnabled = false  -- Start with RGB effect disabled (can toggle manually)
local rgbDelay = 0.2  -- Initial delay for the transition between colors (set to 0.2)
local fovColor = Color3.fromRGB(255, 128, 128) -- Default color

local teamCheckEnabled = false -- Toggle for team check

local rgbHue = 0  -- Start with hue at 0 (red)
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local localPlayer = game.Players.LocalPlayer
local camera = workspace.CurrentCamera

-- FOV Circle Drawing Setup
local FOVring = Drawing.new("Circle")
FOVring.Visible = false -- Start with the FOV circle hidden
FOVring.Thickness = 1.5
FOVring.Radius = fov
FOVring.Transparency = 1
FOVring.Color = fovColor
FOVring.Position = camera.ViewportSize / 2

-- Function to linear interpolation between two colors
local function lerpColor(startColor, endColor, t)
    return startColor:Lerp(endColor, t)
end

-- Function to get the closest target to the crosshair with prediction
local function getClosestWithPrediction(cframe)
    local closestTarget = nil
    local closestDistance = math.huge

    for _, player in pairs(game.Players:GetPlayers()) do
        if player.Character and player.Character:FindFirstChild("Head") and player.Character:FindFirstChild("Humanoid") and player.Character:FindFirstChild("HumanoidRootPart") and player ~= localPlayer then
            if teamCheckEnabled and player.Team == localPlayer.Team then
                continue
            end

            local head = player.Character.Head
            local predictedPosition = prediction == 0 and head.Position or player.Character.HumanoidRootPart.Position + (player.Character.HumanoidRootPart.Velocity * prediction)

            local viewVector = (predictedPosition - camera.CFrame.Position).Unit
            local dotProduct = camera.CFrame.LookVector:Dot(viewVector)

            if dotProduct > 0 then -- Target is in front
                local screenPoint, onScreen = camera:WorldToViewportPoint(predictedPosition)
                if onScreen then -- Target is visible on screen
                    local distance = (Vector2.new(screenPoint.X, screenPoint.Y) - camera.ViewportSize / 2).Magnitude
                    if distance < closestDistance and distance <= fov then
                        closestDistance = distance
                        closestTarget = player
                    end
                end
            end
        end
    end

    return closestTarget
end

local function updateESPVisibility()
    if ESP.Enabled then
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Character and player.Character:FindFirstChild("Head") and player ~= localPlayer then
                local distance = (player.Character.Head.Position - camera.CFrame.Position).Magnitude
                if distance > ESP.MaxDistance then
                    ESP:Hide(player)
                else
                    ESP:Show(player)
                end
            end
        end
    end
end

RunService.RenderStepped:Connect(function()
    updateESPVisibility()

    if aimbotEnabled then
        local pressed = UserInputService:IsMouseButtonPressed(Enum.UserInputType.MouseButton2)

        if pressed then
            local newTarget = getClosestWithPrediction(camera.CFrame)
            if newTarget ~= currentTarget then
                currentTarget = newTarget -- Update target only if it changes
            end

            if currentTarget then
                local targetPosition = currentTarget.Character.Head.Position

                if instantLockEnabled then
                    camera.CFrame = CFrame.new(camera.CFrame.Position, targetPosition)
                else
                    local smoothCFrame = camera.CFrame:Lerp(CFrame.new(camera.CFrame.Position, targetPosition), math.clamp(smoothing / 10, 0.05, 0.2))
                    camera.CFrame = smoothCFrame
                end
            end
        else
            currentTarget = nil -- Reset target if not aiming
        end
    end
end)

print("Current Target:", currentTarget and currentTarget.Name or "None")

-- Update FOV Circle and RGB Effect
local function updateFOVCircle()
    if fovCircleEnabled then
        FOVring.Visible = true
        FOVring.Position = camera.ViewportSize / 2
        FOVring.Radius = fov

        -- Smooth hue transition to cycle through colors if RGB effect is enabled
        if rgbEffectEnabled then
            rgbHue = (rgbHue + rgbDelay * RunService.RenderStepped:Wait()) % 1  -- Ensure hue stays between 0 and 1
            FOVring.Color = Color3.fromHSV(rgbHue, 1, 1)  -- Max saturation and brightness for vivid colors
        else
            FOVring.Color = fovColor
        end
    else
        FOVring.Visible = false
    end
end

-- Add the groupbox and the toggle in the main tab (left)
local LeftGroupBox = Tabs.Main:AddLeftGroupbox('Aimbot Settings')

-- Aimbot Settings
LeftGroupBox:AddToggle('AimbotEnabled', {
    Text = 'Enable Aimbot',
    Default = false,  -- Default value is off
    Tooltip = 'Enable or disable the aimbot.',
    Callback = function(Value)
        aimbotEnabled = Value
        if aimbotEnabled then
            startAimbot()
        else
            if loop then
                loop:Disconnect()
                loop = nil
            end
        end
    end
})

-- Aimbot Smoothing Slider
LeftGroupBox:AddSlider('AimbotSmoothing', {
    Text = 'Aimbot Smoothing',
    Default = 1,
    Min = 0,
    Max = 10,
    Rounding = 1,
    Tooltip = 'Adjust the smoothing of the aimbot.',
    Callback = function(Value)
        smoothing = Value
    end
})

-- Aimbot Prediction Slider
LeftGroupBox:AddSlider('AimbotPrediction', {
    Text = 'Aimbot Prediction',
    Default = 0,
    Min = 0,
    Max = 50,
    Rounding = 1,
    Tooltip = 'Adjust the amount of prediction applied to the aimbot.',
    Callback = function(Value)
        prediction = Value
    end
})

-- New Aimbot Instant Lock Toggle
LeftGroupBox:AddToggle('InstantLock', {
    Text = 'Enable Instant Lock',
    Default = false,  -- Default value is off
    Tooltip = 'Lock instantly onto target\'s head without prediction or smoothing.',
    Callback = function(Value)
        instantLockEnabled = Value
    end
})

-- New Team Check Toggle
LeftGroupBox:AddToggle('TeamCheck', {
    Text = 'Enable Team Check',
    Default = false,
    Tooltip = 'Prevent locking onto teammates.',
    Callback = function(Value)
        teamCheckEnabled = Value
    end
})

-- Add FOV Circle GroupBox (separate group box for FOV circle)
local FOVGroupBox = Tabs.Main:AddLeftGroupbox('FOV Circle Settings')

-- FOV Circle Toggle
FOVGroupBox:AddToggle('FovCircleToggle', {
    Text = 'Enable FOV Circle',
    Default = false,
    Tooltip = 'Enable or disable the FOV circle.',
    Callback = function(Value)
        fovCircleEnabled = Value
        updateFOVCircle() -- Update the FOV circle visibility based on toggle
    end
})

-- FOV Circle Radius Slider
FOVGroupBox:AddSlider('FovSlider', {
    Text = 'FOV Circle Radius',
    Default = 250,
    Min = 1,
    Max = 1000,
    Rounding = 0,
    Tooltip = 'Adjust the radius of the FOV circle.',
    Callback = function(Value)
        fov = Value
        updateFOVCircle() -- Update the FOV circle radius based on the slider
    end
})

-- RGB Effect Toggle
FOVGroupBox:AddToggle('RgbEffectToggle', {
    Text = 'Enable RGB Effect',
    Default = false,
    Tooltip = 'Enable or disable the RGB color cycling effect on the FOV circle.',
    Callback = function(Value)
        rgbEffectEnabled = Value
        updateFOVCircle() -- Update the RGB effect based on the toggle
    end
})

-- RGB Effect Delay Slider
FOVGroupBox:AddSlider('RgbDelaySlider', {
    Text = 'RGB Effect Delay (s)',
    Default = rgbDelay,
    Min = 0.01,
    Max = 1,
    Rounding = 2,
    Tooltip = 'Adjust the delay for the RGB color transition. Lower values will make the transition faster.',
    Callback = function(Value)
        rgbDelay = Value
    end
})

-- Add GroupBox for ESP Settings (right)
local ESPGroupBox = Tabs.Main:AddRightGroupbox('ESP Settings')

-- Manual Toggle for ESP and its options
ESPGroupBox:AddToggle('ESPEnabled', {
    Text = 'Enable ESP',
    Default = false,  -- Default value is off
    Tooltip = 'Enable or disable ESP',
    Callback = function(Value)
        ESP.Enabled = Value
    end
})

-- Manual toggle for individual ESP features
ESPGroupBox:AddToggle('ShowBox', {
    Text = 'Show Box',
    Default = false,  -- Default value is off
    Tooltip = 'Enable or disable ESP boxes',
    Callback = function(Value)
        ESP.ShowBox = Value
    end
})

ESPGroupBox:AddToggle('ShowName', {
    Text = 'Show Name',
    Default = false,  -- Default value is off
    Tooltip = 'Enable or disable player names in ESP',
    Callback = function(Value)
        ESP.ShowName = Value
    end
})

ESPGroupBox:AddToggle('ShowHealth', {
    Text = 'Show Health',
    Default = false,  -- Default value is off
    Tooltip = 'Enable or disable player healthbar in ESP',
    Callback = function(Value)
        ESP.ShowHealth = Value
    end
})

ESPGroupBox:AddToggle('ShowTracer', {
    Text = 'Show Tracers',
    Default = false,  -- Default value is off
    Tooltip = 'Enable or disable tracers in ESP',
    Callback = function(Value)
        ESP.ShowTracer = Value
    end
})

ESPGroupBox:AddToggle('ShowDistance', {
    Text = 'Show Distance',
    Default = false,  -- Default value is off
    Tooltip = 'Enable or disable distance display in ESP',
    Callback = function(Value)
        ESP.ShowDistance = Value
    end
})

ESPGroupBox:AddSlider('MaxDistance', {
    Text = 'ESP Max Distance',
    Default = 1000,
    Min = 100,
    Max = 5000,
    Rounding = 0,
    Tooltip = 'Adjust the maximum distance for ESP visibility.',
    Callback = function(Value)
        ESP.MaxDistance = Value
    end
})
